
-- 创建术语表主表
CREATE TABLE glossaries (
    id SERIAL PRIMARY KEY,
    deepl_glossary_id VARCHAR(255) UNIQUE,  -- DeepL 平台返回的术语表 ID
    name VARCHAR(255) NOT NULL,             -- 术语表名称
    source_lang VARCHAR(10) NOT NULL,       -- 源语言代码
    target_lang VARCHAR(10) NOT NULL,       -- 目标语言代码
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- 确保每个语言对只有一个术语表
    CONSTRAINT uix_lang_pair UNIQUE (source_lang, target_lang),
    -- 确保语言代码格式正确
    CONSTRAINT chk_source_lang CHECK (source_lang ~ '^[A-Z]{2}(-[A-Z]{2})?$'),
    CONSTRAINT chk_target_lang CHECK (target_lang ~ '^[A-Z]{2}(-[A-Z]{2})?$')
);

-- 创建术语条目表
CREATE TABLE glossary_entries (
    id SERIAL PRIMARY KEY,
    glossary_id INTEGER NOT NULL REFERENCES glossaries(id) ON DELETE CASCADE,
    source_term VARCHAR(1024) NOT NULL,     -- 源语言术语（DeepL 限制 1024 字节）
    target_term VARCHAR(1024) NOT NULL,     -- 目标语言术语（DeepL 限制 1024 字节）
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- 确保每个术语表中源术语唯一
    CONSTRAINT uix_glossary_source_term UNIQUE (glossary_id, source_term)
);

-- 创建索引
CREATE INDEX idx_glossary_langs ON glossaries(source_lang, target_lang);
CREATE INDEX idx_glossary_entries_glossary_id ON glossary_entries(glossary_id);
CREATE INDEX idx_glossary_entries_terms ON glossary_entries(glossary_id, source_term, target_term);

-- 创建更新时间触发器
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_glossaries_updated_at
    BEFORE UPDATE ON glossaries
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 创建注释
COMMENT ON TABLE glossaries IS '术语表主表，存储 DeepL 术语表基本信息';
COMMENT ON TABLE glossary_entries IS '术语条目表，存储术语对';
COMMENT ON COLUMN glossaries.deepl_glossary_id IS 'DeepL 平台返回的术语表 ID';
COMMENT ON COLUMN glossaries.source_lang IS '源语言代码（如 ZH、EN）';
COMMENT ON COLUMN glossaries.target_lang IS '目标语言代码（如 EN、ID）';
COMMENT ON COLUMN glossary_entries.source_term IS '源语言术语，最大 1024 字节';
COMMENT ON COLUMN glossary_entries.target_term IS '目标语言术语，最大 1024 字节';




飞书用户存储；
-- 创建UUID扩展（如果还没有）
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 创建用户表
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    feishu_user_id VARCHAR(255) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    en_name VARCHAR(255),
    email VARCHAR(255),
    mobile VARCHAR(255),
    avatar_url VARCHAR(1024),
    tenant_key VARCHAR(255) NOT NULL,
    
    -- 认证相关
    access_token VARCHAR(255),
    refresh_token VARCHAR(255),
    token_expires_at TIMESTAMP,
    
    -- 用户状态
    is_active BOOLEAN DEFAULT TRUE,
    last_login_at TIMESTAMP,
    login_count INTEGER DEFAULT 0,
    
    -- 审计字段
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 创建更新时间触发器
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();



-- 创建任务表
-- 创建 tasks 表
CREATE TABLE tasks (
    id VARCHAR(36) PRIMARY KEY,
    filename VARCHAR(255) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'queued',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    completed_at TIMESTAMP WITH TIME ZONE,
    error TEXT,
    result_data TEXT,
    result_filename VARCHAR(255),
    progress INTEGER DEFAULT 0,
    file_content BYTEA
);

-- 创建索引
CREATE INDEX idx_tasks_status ON tasks(status);
CREATE INDEX idx_tasks_created_at ON tasks(created_at);
CREATE INDEX idx_tasks_completed_at ON tasks(completed_at);

-- 添加状态检查约束
ALTER TABLE tasks
ADD CONSTRAINT check_status 
CHECK (status IN ('queued', 'processing', 'completed', 'failed'));

-- 添加注释
COMMENT ON TABLE tasks IS '存储距离计算任务信息';
COMMENT ON COLUMN tasks.id IS '任务唯一标识符';
COMMENT ON COLUMN tasks.filename IS '上传的文件名';
COMMENT ON COLUMN tasks.status IS '任务状态：queued-等待中, processing-处理中, completed-已完成, failed-失败';
COMMENT ON COLUMN tasks.created_at IS '任务创建时间';
COMMENT ON COLUMN tasks.completed_at IS '任务完成时间';
COMMENT ON COLUMN tasks.error IS '错误信息';
COMMENT ON COLUMN tasks.result_data IS '计算结果数据（Base64编码）';
COMMENT ON COLUMN tasks.result_filename IS '结果文件名';
COMMENT ON COLUMN tasks.progress IS '任务进度（0-100）';
COMMENT ON COLUMN tasks.file_content IS '上传的文件内容';

-- 创建更新时间触发器
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.completed_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_tasks_completed_at
    BEFORE UPDATE ON tasks
    FOR EACH ROW
    WHEN (NEW.status = 'completed' AND (OLD.status IS NULL OR OLD.status != 'completed'))
    EXECUTE FUNCTION update_modified_column();



    -- 修改状态检查约束，添加 cancelled 状态
ALTER TABLE tasks DROP CONSTRAINT check_status;
ALTER TABLE tasks
ADD CONSTRAINT check_status 
CHECK (status IN ('queued', 'processing', 'completed', 'failed', 'cancelled'));

-- 更新表注释
COMMENT ON COLUMN tasks.status IS '任务状态：queued-等待中, processing-处理中, completed-已完成, failed-失败, cancelled-已取消';